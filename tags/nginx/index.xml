<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on Tech Adventures by Tarun Lalwani</title>
    <link>http://tarunlalwani.com/tags/nginx/</link>
    <description>Recent content in Nginx on Tech Adventures by Tarun Lalwani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tarunlalwani.com/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How To Debug Nginx Reverse Proxy Issues</title>
      <link>http://tarunlalwani.com/post/how-to-debug-nginx-reverse-proxy-issues-php-fpm-gunicorn-uwsgi/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tarunlalwani.com/post/how-to-debug-nginx-reverse-proxy-issues-php-fpm-gunicorn-uwsgi/</guid>
      <description>I love Nginx for its revery proxy capabilities and ease of configuration. A simple proxy_pass can allow you to connect to any of the backends GoLang, php-fpm, NodeJS, another nginx, tomcat, apache, gunicorn, uwsgi, flask, django, a external CDN and many more
When proxying a request to another server, you may or may not have access to log of the server. So it is important to be able to debug, where the problem lies when an issue occurs.</description>
    </item>
    
    <item>
      <title>Request Capturing using NGINX and Lua</title>
      <link>http://tarunlalwani.com/post/request-capturing-nginx-lua/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://tarunlalwani.com/post/request-capturing-nginx-lua/</guid>
      <description>In one of our projects we wanted to capture and document incoming traffic to our server. The requirements for recording/capturing the incoming traffic were as below
 Capture both GET and POST requests Capture only certain locations Back-end service involved were PHP, Java and some NodeJS also Capture Response Code, Response Text and Duration also Mask certain sensitive data like emails, credit card numbers  The plan was to use this data for creating simulated production replay and make sure any changes made to code doesn&amp;rsquo;t impact existing working flows.</description>
    </item>
    
  </channel>
</rss>